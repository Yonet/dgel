const UNIFORMS = ["vec3 diffuse;", "vec3 specular;", // "float intensity;",
"vec3 position;", "float constantAttenuation;", "float linearAttenuation;", "float quadraticAttenuation;"];
const FUNCTION =
/* glsl */
`
vec3 computePointLight(
  const in PhongMaterial material,
  const in PointLight light,
  const in vec3 normal,
  const in vec3 viewDirection,
  const in vec3 fragmentPosition
) {
  vec3 lightDirection = normalize(light.position - fragmentPosition);

  // Ambient
  vec3 ambientColor = vec3(0.5);
  float ambientIntensity = 0.5;
  #ifdef AMBIENT_LIGHT
  ambientColor = uAmbientLightColor;
  ambientIntensity = uAmbientLightIntensity;
  #endif

  // Diffuse reflection (Lambertial reflectance)
  float diff = max(dot(normal, lightDirection), 0.0);

  // Specular shading
  vec3 reflectDirection = -reflect(lightDirection, normal);
  float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), material.shininess);

  // Attenuation
  float distance = length(light.position - fragmentPosition);
  float attenuation = 1.0 / (light.constantAttenuation + light.linearAttenuation * distance + light.quadraticAttenuation * (distance * distance));

  vec3 ambient = ambientColor * ambientIntensity * material.ambientColor;
  vec3 diffuse = light.diffuse * diff * material.diffuseColor;
  vec3 specular = light.specular * spec * material.specularColor;

  return (ambient + diffuse + specular) * attenuation;
}
`;
export default {
  UNIFORMS,
  FUNCTION
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaGFkZXJzL2xpZ2h0aW5nL3BvaW50TGlnaHRzLmdsc2wudHMiXSwibmFtZXMiOlsiVU5JRk9STVMiLCJGVU5DVElPTiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUSxHQUFHLENBQ2YsZUFEZSxFQUVmLGdCQUZlLEVBR2Y7QUFDQSxnQkFKZSxFQUtmLDRCQUxlLEVBTWYsMEJBTmUsRUFPZiw2QkFQZSxDQUFqQjtBQVVBLE1BQU1DLFFBQVE7QUFBRztBQUFZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQUE3QjtBQXFDQSxlQUFlO0FBQUVELEVBQUFBLFFBQUY7QUFBWUMsRUFBQUE7QUFBWixDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVU5JRk9STVMgPSBbXG4gIFwidmVjMyBkaWZmdXNlO1wiLFxuICBcInZlYzMgc3BlY3VsYXI7XCIsXG4gIC8vIFwiZmxvYXQgaW50ZW5zaXR5O1wiLFxuICBcInZlYzMgcG9zaXRpb247XCIsXG4gIFwiZmxvYXQgY29uc3RhbnRBdHRlbnVhdGlvbjtcIixcbiAgXCJmbG9hdCBsaW5lYXJBdHRlbnVhdGlvbjtcIixcbiAgXCJmbG9hdCBxdWFkcmF0aWNBdHRlbnVhdGlvbjtcIixcbl07XG5cbmNvbnN0IEZVTkNUSU9OID0gLyogZ2xzbCAqLyBgXG52ZWMzIGNvbXB1dGVQb2ludExpZ2h0KFxuICBjb25zdCBpbiBQaG9uZ01hdGVyaWFsIG1hdGVyaWFsLFxuICBjb25zdCBpbiBQb2ludExpZ2h0IGxpZ2h0LFxuICBjb25zdCBpbiB2ZWMzIG5vcm1hbCxcbiAgY29uc3QgaW4gdmVjMyB2aWV3RGlyZWN0aW9uLFxuICBjb25zdCBpbiB2ZWMzIGZyYWdtZW50UG9zaXRpb25cbikge1xuICB2ZWMzIGxpZ2h0RGlyZWN0aW9uID0gbm9ybWFsaXplKGxpZ2h0LnBvc2l0aW9uIC0gZnJhZ21lbnRQb3NpdGlvbik7XG5cbiAgLy8gQW1iaWVudFxuICB2ZWMzIGFtYmllbnRDb2xvciA9IHZlYzMoMC41KTtcbiAgZmxvYXQgYW1iaWVudEludGVuc2l0eSA9IDAuNTtcbiAgI2lmZGVmIEFNQklFTlRfTElHSFRcbiAgYW1iaWVudENvbG9yID0gdUFtYmllbnRMaWdodENvbG9yO1xuICBhbWJpZW50SW50ZW5zaXR5ID0gdUFtYmllbnRMaWdodEludGVuc2l0eTtcbiAgI2VuZGlmXG5cbiAgLy8gRGlmZnVzZSByZWZsZWN0aW9uIChMYW1iZXJ0aWFsIHJlZmxlY3RhbmNlKVxuICBmbG9hdCBkaWZmID0gbWF4KGRvdChub3JtYWwsIGxpZ2h0RGlyZWN0aW9uKSwgMC4wKTtcblxuICAvLyBTcGVjdWxhciBzaGFkaW5nXG4gIHZlYzMgcmVmbGVjdERpcmVjdGlvbiA9IC1yZWZsZWN0KGxpZ2h0RGlyZWN0aW9uLCBub3JtYWwpO1xuICBmbG9hdCBzcGVjID0gcG93KG1heChkb3Qodmlld0RpcmVjdGlvbiwgcmVmbGVjdERpcmVjdGlvbiksIDAuMCksIG1hdGVyaWFsLnNoaW5pbmVzcyk7XG5cbiAgLy8gQXR0ZW51YXRpb25cbiAgZmxvYXQgZGlzdGFuY2UgPSBsZW5ndGgobGlnaHQucG9zaXRpb24gLSBmcmFnbWVudFBvc2l0aW9uKTtcbiAgZmxvYXQgYXR0ZW51YXRpb24gPSAxLjAgLyAobGlnaHQuY29uc3RhbnRBdHRlbnVhdGlvbiArIGxpZ2h0LmxpbmVhckF0dGVudWF0aW9uICogZGlzdGFuY2UgKyBsaWdodC5xdWFkcmF0aWNBdHRlbnVhdGlvbiAqIChkaXN0YW5jZSAqIGRpc3RhbmNlKSk7XG5cbiAgdmVjMyBhbWJpZW50ID0gYW1iaWVudENvbG9yICogYW1iaWVudEludGVuc2l0eSAqIG1hdGVyaWFsLmFtYmllbnRDb2xvcjtcbiAgdmVjMyBkaWZmdXNlID0gbGlnaHQuZGlmZnVzZSAqIGRpZmYgKiBtYXRlcmlhbC5kaWZmdXNlQ29sb3I7XG4gIHZlYzMgc3BlY3VsYXIgPSBsaWdodC5zcGVjdWxhciAqIHNwZWMgKiBtYXRlcmlhbC5zcGVjdWxhckNvbG9yO1xuXG4gIHJldHVybiAoYW1iaWVudCArIGRpZmZ1c2UgKyBzcGVjdWxhcikgKiBhdHRlbnVhdGlvbjtcbn1cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IHsgVU5JRk9STVMsIEZVTkNUSU9OIH07XG4iXX0=